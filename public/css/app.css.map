{"version":3,"sources":["variables.scss","partials/_reset.scss","partials/_grids.scss","../../../bower_components/susy/sass/susy/output/support/_rem.scss","../../../bower_components/susy/sass/susy/language/susy/_container.scss","../../../bower_components/susy/sass/susy/output/support/_clearfix.scss","partials/_links.scss","partials/_typography.scss","partials/_article.scss","../../../bower_components/susy/sass/susy/language/susy/_breakpoint-plugin.scss","../../../bower_components/susy/sass/susy/language/susy/_span.scss","../../../bower_components/susy/sass/susy/output/shared/_direction.scss","../../../bower_components/susy/sass/susy/language/susy/_gutters.scss","app.css","partials/_author.scss"],"names":[],"mappings":"AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuCE;ACjEF;EACE,UAAU;EACV,gBAAgB;EAChB,iBAAiB;CAClB;;AACD;EACE,cAAc;CACf;;ACPD;ECmBI,iBHAc;EGAd,kBCqDoC;EDrDpC,mBCqDmE;EFtErE,gBAAgB;CACjB;;AAHD;EGYM,aAAa;EACb,eAAe;EACf,YAAY;CACb;;ACfL;EACE,eNSoB;EMRpB,iBNKoB;EMJpB,sBAAsB;CACvB;;ACJD;EACE,iCPaoC;EOZpC,ePAkB;COCnB;;AAED;EACE,mCPOwC;EONxC,ePNoB;COOrB;;ACRD;EACE,oBAAoB;CACrB;;AAED;EACE,eAAe;EACf,iBRE0B;EQD1B,oBAAoB;CACrB;;AAED;EACE,iBAAiB;EACjB,iCREoC;EQDpC,iBRPsB;EQQtB,oBAAoB;CACrB;;AAED;EACE,iBAAiB;EACjB,iBRdsB;CQevB;;AC8BG;ED3BF;ILJE,sBOwIoB;IPxIpB,YQA4D;IRA5D,4BS4DwB;IT5DxB,4BOwIoB;GFjIrB;CKkFF;;AC5GD;EACE,aAAa;EACb,oBAAoB;CACrB;;AAED;EACE,gCAAkB;CACnB;;AAED;EACE,YAAY;EACZ,oBAAoB;EACpB,YAAY;CACb","file":"app.css","sourcesContent":["// Custom variables\n$header-color: #353535;\n$body-color: #515151;\n$body-color-light: #979797;\n\n$font-weight-normal: 400;\n$font-weight-medium: 500;\n$font-weight-bold: 700;\n$font-weight-extra-bold: 800;\n\n$anchor-color: #47b8e0;\n$anchor-font-weight: $font-weight-bold;\n\n$font-family-header: 'Raleway', sans-serif;\n$font-family-body: 'Lato ', sans-serif;\n\n$susy: (\n  columns: 12,\n  gutters: .25,\n  container: 960px\n);\n\n// End of custom variables\n\n\n\n/* Bootstrap Variables\n\n// Body\n$body-bg: #f5f8fa;\n\n// Borders\n$laravel-border-color: darken($body-bg, 10%);\n$list-group-border: $laravel-border-color;\n$navbar-default-border: $laravel-border-color;\n$panel-default-border: $laravel-border-color;\n$panel-inner-border: $laravel-border-color;\n\n// Brands\n$brand-primary: #3097D1;\n$brand-info: #8eb4cb;\n$brand-success: #2ab27b;\n$brand-warning: #cbb956;\n$brand-danger: #bf5329;\n\n// Typography\n$font-family-sans-serif: \"Raleway\", sans-serif;\n$font-size-base: 14px;\n$line-height-base: 1.6;\n$text-color: #636b6f;\n\n// Navbar\n$navbar-default-bg: #fff;\n\n// Buttons\n$btn-default-color: $text-color;\n\n// Inputs\n$input-border: lighten($text-color, 40%);\n$input-border-focus: lighten($brand-primary, 25%);\n$input-color-placeholder: lighten($text-color, 30%);\n\n// Panels\n$panel-default-heading-bg: #fff;\n\n*/","body{\r\n  margin: 0;\r\n  padding: 60px 0;\r\n  line-height: 1.9;\r\n}\r\nh1,h2,h3,h4,h5{\r\n  margin-top: 0;\r\n}",".container {\r\n  @include container;\r\n  padding: 0 40px;\r\n}","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","a{\r\n  color: $anchor-color;\r\n  font-weight: $anchor-font-weight;\r\n  text-decoration: none;\r\n}","body{\r\n  font-family: $font-family-body;\r\n  color: $body-color;\r\n}\r\n\r\nh1,h2,h3,h4,h5{\r\n  font-family: $font-family-header;\r\n  color: $header-color;\r\n}\r\n\r\n",".article{\r\n  margin-bottom: 60px;\r\n}\r\n\r\n.article__header{\r\n  font-size: 2em;\r\n  font-weight: $font-weight-extra-bold;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.article__subheader{\r\n  font-size: 1.4em;\r\n  font-family: $font-family-body;\r\n  font-weight: $font-weight-medium;\r\n  margin-bottom: 60px;\r\n}\r\n\r\n.article__body{\r\n  font-size: 1.2em;\r\n  font-weight: $font-weight-normal;\r\n}\r\n\r\n@include susy-breakpoint(720px){\r\n  .article{\r\n    @include span(8 of 12);\r\n    @include push(2);\r\n  }\r\n}\r\n","// Breakpoint Integration\n// ======================\n\n$susy-media: () !default;\n$susy-media-fallback: false !default;\n\n$_susy-media-context: ();\n\n\n// Susy Breakpoint\n// ---------------\n// Change grids at different media query breakpoints.\n// - $query     : <min-width> [<max-width>] | <property> <value> | <map>\n// - $layout    : <settings>\n// - $no-query  : <boolean> | <selector>\n@mixin susy-breakpoint(\n  $query,\n  $layout: false,\n  $no-query: $susy-media-fallback\n) {\n  @include susy-media-router($query, $no-query) {\n    @if $layout {\n      @include with-layout($layout) {\n        @content;\n      }\n    } @else {\n      @content;\n    }\n  }\n}\n\n\n// Susy Media\n// ----------\n// - $query: <min-width> [<max-width>] | <property> <value>\n// - $no-query: <boolean> | <selector>\n@mixin susy-media(\n  $query,\n  $no-query: $susy-media-fallback\n) {\n  $old-context: $_susy-media-context;\n  $name: if(map-has-key($susy-media, $query), $query, null);\n  $query: susy-get-media($query);\n  $query: susy-parse-media($query);\n\n  @include susy-media-context($query, $name);\n\n  @if $no-query and type-of($no-query) != string {\n    @content;\n  } @else {\n    @media #{susy-render-media($query)} {\n      @content;\n    }\n\n    @if type-of($no-query) == string {\n      #{$no-query} & {\n        @content;\n      }\n    }\n  }\n\n  @include susy-media-context($old-context, $clean: true);\n}\n\n\n// Media Router\n// ------------\n// Rout media arguments to the correct mixin.\n@mixin susy-media-router(\n  $query,\n  $no-query: $susy-media-fallback\n) {\n  @if susy-support(breakpoint, (mixin: breakpoint), $warn: false) {\n    @include breakpoint($query, $no-query) {\n      @content;\n    }\n  } @else {\n    @include susy-media($query, $no-query) {\n      @content;\n    }\n  }\n}\n\n\n// Update Context\n// -------------\n// Set the new media context\n@mixin susy-media-context(\n  $query,\n  $name: null,\n  $clean: false\n) {\n  $query: map-merge((name: $name), $query);\n\n  @if $clean {\n    $_susy-media-context: $query !global;\n  } @else {\n    $_susy-media-context: map-merge($_susy-media-context, $query) !global;\n  }\n}\n\n\n// Media Context\n// -------------\n// Return the full media context, or a single media property (e.g. min-width)\n@function susy-media-context(\n  $property: false\n) {\n  @if $property {\n    @return map-get($_susy-media-context, $property);\n  } @else {\n    @return $_susy-media-context;\n  }\n}\n\n\n// Get Media\n// ---------\n// Return a named media-query from $susy-media.\n// - $name: <key>\n@function susy-get-media(\n  $name\n) {\n  @if map-has-key($susy-media, $name) {\n    $map-value: map-get($susy-media, $name);\n    @if ($name == $map-value) {\n      $name: $map-value;\n    } @else {\n      $name: susy-get-media($map-value);\n    }\n  }\n\n  @return $name;\n}\n\n\n// Render Media\n// ------------\n// Build a media-query string from various media settings\n@function susy-render-media(\n  $query\n) {\n  $output: null;\n  @each $property, $value in $query {\n    $string: null;\n\n    @if $property == media {\n      $string: $value;\n    } @else {\n      $string: '(#{$property}: #{$value})';\n    }\n\n    $output: if($output, '#{$output} and #{$string}', $string);\n  }\n\n  @return $output;\n}\n\n\n// Parse Media\n// -----------\n// Return parsed media-query settings based on shorthand\n@function susy-parse-media(\n  $query\n) {\n  $mq: null;\n  @if type-of($query) == map {\n    $mq: $query;\n  } @else if type-of($query) == number {\n    $mq: (min-width: $query);\n  } @else if type-of($query) == list and length($query) == 2 {\n    @if type-of(nth($query, 1)) == number {\n      $mq: (\n        min-width: min($query...),\n        max-width: max($query...),\n      );\n    } @else {\n      $mq: (nth($query, 1): nth($query, 2));\n    }\n  } @else {\n    $mq: (media: '#{$query}');\n  }\n\n  @return $mq;\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","/* Bootstrap Variables\n\n// Body\n$body-bg: #f5f8fa;\n\n// Borders\n$laravel-border-color: darken($body-bg, 10%);\n$list-group-border: $laravel-border-color;\n$navbar-default-border: $laravel-border-color;\n$panel-default-border: $laravel-border-color;\n$panel-inner-border: $laravel-border-color;\n\n// Brands\n$brand-primary: #3097D1;\n$brand-info: #8eb4cb;\n$brand-success: #2ab27b;\n$brand-warning: #cbb956;\n$brand-danger: #bf5329;\n\n// Typography\n$font-family-sans-serif: \"Raleway\", sans-serif;\n$font-size-base: 14px;\n$line-height-base: 1.6;\n$text-color: #636b6f;\n\n// Navbar\n$navbar-default-bg: #fff;\n\n// Buttons\n$btn-default-color: $text-color;\n\n// Inputs\n$input-border: lighten($text-color, 40%);\n$input-border-focus: lighten($brand-primary, 25%);\n$input-color-placeholder: lighten($text-color, 30%);\n\n// Panels\n$panel-default-heading-bg: #fff;\n\n*/\nbody {\n  margin: 0;\n  padding: 60px 0;\n  line-height: 1.9;\n}\n\nh1, h2, h3, h4, h5 {\n  margin-top: 0;\n}\n\n.container {\n  max-width: 960px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0 40px;\n}\n\n.container:after {\n  content: \" \";\n  display: block;\n  clear: both;\n}\n\na {\n  color: #47b8e0;\n  font-weight: 700;\n  text-decoration: none;\n}\n\nbody {\n  font-family: \"Lato \", sans-serif;\n  color: #515151;\n}\n\nh1, h2, h3, h4, h5 {\n  font-family: \"Raleway\", sans-serif;\n  color: #353535;\n}\n\n.article {\n  margin-bottom: 60px;\n}\n\n.article__header {\n  font-size: 2em;\n  font-weight: 800;\n  margin-bottom: 30px;\n}\n\n.article__subheader {\n  font-size: 1.4em;\n  font-family: \"Lato \", sans-serif;\n  font-weight: 500;\n  margin-bottom: 60px;\n}\n\n.article__body {\n  font-size: 1.2em;\n  font-weight: 400;\n}\n\n@media (min-width: 720px) {\n  .article {\n    width: 66.1016949153%;\n    float: left;\n    margin-right: 1.6949152542%;\n    margin-left: 16.9491525424%;\n  }\n}\n\n.author {\n  height: 60px;\n  margin-bottom: 60px;\n}\n\n.author__details {\n  padding-left: calc(60px + 20px);\n}\n\n.author__image {\n  width: 60px;\n  border-radius: 100%;\n  float: left;\n}\n",".author{\r\n  height: 60px;\r\n  margin-bottom: 60px;\r\n}\r\n\r\n.author__details{\r\n  padding-left: calc(60px + 20px);\r\n}\r\n\r\n.author__image{\r\n  width: 60px;\r\n  border-radius: 100%;\r\n  float: left;\r\n}\r\n\r\n.author__name{\r\n\r\n}\r\n\r\n.author__post-time{\r\n\r\n}"]}